#!/usr/bin/env python

from git import Repo
from argparse import ArgumentParser
from dateutil import parser as DateParser
import sys
import logging
import time


class ListsAuthors:
    def __init__(self, repo, since):
        self._repo = repo
        self._since = since

        logger = logging.getLogger()
        logger.setLevel(logging.DEBUG)
        logStream = logging.StreamHandler()
        logStream.setFormatter(logging.Formatter('%(message)s'))
        logger.addHandler(logStream)
        self.logger = logger


    def commits(self):
        repo = Repo(self._repo)
        ts = time.mktime(DateParser.parse(self._since).timetuple())
        for commit in repo.iter_commits('master'):
            try:
                if commit.committed_date < ts:
                    break
                yield commit
            except:
                pass

    def listAuthors(self, separator=' '):
        authors = list()
        for commit in self.commits():
            authors.append(commit.committer.email)
        print(separator.join(set(authors)))


def main(args):
    parser = ArgumentParser()
    parser.add_argument('path', default='.', nargs="?",
                        help='Show only commits that are enough to explain how the files that match the specified '
                             'paths came to be. See "History Simplification" below for details and other '
                             'simplification modes.')
    parser.add_argument('--since', default='1-1-1', help='List authors from commits more recent than a specific date.')
    parser.add_argument('--separator', default=' ', help='The separator used between the results.')
    options = parser.parse_args(args)

    patchExtractor = ListsAuthors(options.path, options.since)
    patchExtractor.listAuthors(options.separator)


if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
